                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.5.6 # (Aug  1 2016)
                              4 ; This file generated Thu Aug  4 16:03:25 2016
                              5 ;--------------------------------------------------------
                              6 	.module 60
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _DIG_CODE
                             13 	.globl _DIG_PLACE
                             14 	.globl _main
                             15 	.globl _TF2
                             16 	.globl _EXF2
                             17 	.globl _RCLK
                             18 	.globl _TCLK
                             19 	.globl _EXEN2
                             20 	.globl _TR2
                             21 	.globl _C_T2
                             22 	.globl _CP_RL2
                             23 	.globl _T2CON_7
                             24 	.globl _T2CON_6
                             25 	.globl _T2CON_5
                             26 	.globl _T2CON_4
                             27 	.globl _T2CON_3
                             28 	.globl _T2CON_2
                             29 	.globl _T2CON_1
                             30 	.globl _T2CON_0
                             31 	.globl _PT2
                             32 	.globl _ET2
                             33 	.globl _CY
                             34 	.globl _AC
                             35 	.globl _F0
                             36 	.globl _RS1
                             37 	.globl _RS0
                             38 	.globl _OV
                             39 	.globl _F1
                             40 	.globl _P
                             41 	.globl _PS
                             42 	.globl _PT1
                             43 	.globl _PX1
                             44 	.globl _PT0
                             45 	.globl _PX0
                             46 	.globl _RD
                             47 	.globl _WR
                             48 	.globl _T1
                             49 	.globl _T0
                             50 	.globl _INT1
                             51 	.globl _INT0
                             52 	.globl _TXD
                             53 	.globl _RXD
                             54 	.globl _P3_7
                             55 	.globl _P3_6
                             56 	.globl _P3_5
                             57 	.globl _P3_4
                             58 	.globl _P3_3
                             59 	.globl _P3_2
                             60 	.globl _P3_1
                             61 	.globl _P3_0
                             62 	.globl _EA
                             63 	.globl _ES
                             64 	.globl _ET1
                             65 	.globl _EX1
                             66 	.globl _ET0
                             67 	.globl _EX0
                             68 	.globl _P2_7
                             69 	.globl _P2_6
                             70 	.globl _P2_5
                             71 	.globl _P2_4
                             72 	.globl _P2_3
                             73 	.globl _P2_2
                             74 	.globl _P2_1
                             75 	.globl _P2_0
                             76 	.globl _SM0
                             77 	.globl _SM1
                             78 	.globl _SM2
                             79 	.globl _REN
                             80 	.globl _TB8
                             81 	.globl _RB8
                             82 	.globl _TI
                             83 	.globl _RI
                             84 	.globl _P1_7
                             85 	.globl _P1_6
                             86 	.globl _P1_5
                             87 	.globl _P1_4
                             88 	.globl _P1_3
                             89 	.globl _P1_2
                             90 	.globl _P1_1
                             91 	.globl _P1_0
                             92 	.globl _TF1
                             93 	.globl _TR1
                             94 	.globl _TF0
                             95 	.globl _TR0
                             96 	.globl _IE1
                             97 	.globl _IT1
                             98 	.globl _IE0
                             99 	.globl _IT0
                            100 	.globl _P0_7
                            101 	.globl _P0_6
                            102 	.globl _P0_5
                            103 	.globl _P0_4
                            104 	.globl _P0_3
                            105 	.globl _P0_2
                            106 	.globl _P0_1
                            107 	.globl _P0_0
                            108 	.globl _TH2
                            109 	.globl _TL2
                            110 	.globl _RCAP2H
                            111 	.globl _RCAP2L
                            112 	.globl _T2CON
                            113 	.globl _B
                            114 	.globl _ACC
                            115 	.globl _PSW
                            116 	.globl _IP
                            117 	.globl _P3
                            118 	.globl _IE
                            119 	.globl _P2
                            120 	.globl _SBUF
                            121 	.globl _SCON
                            122 	.globl _P1
                            123 	.globl _TH1
                            124 	.globl _TH0
                            125 	.globl _TL1
                            126 	.globl _TL0
                            127 	.globl _TMOD
                            128 	.globl _TCON
                            129 	.globl _PCON
                            130 	.globl _DPH
                            131 	.globl _DPL
                            132 	.globl _SP
                            133 	.globl _P0
                            134 	.globl _display_PARM_2
                            135 	.globl _delayms
                            136 	.globl _display
                            137 ;--------------------------------------------------------
                            138 ; special function registers
                            139 ;--------------------------------------------------------
                            140 	.area RSEG    (DATA)
                    0080    141 _P0	=	0x0080
                    0081    142 _SP	=	0x0081
                    0082    143 _DPL	=	0x0082
                    0083    144 _DPH	=	0x0083
                    0087    145 _PCON	=	0x0087
                    0088    146 _TCON	=	0x0088
                    0089    147 _TMOD	=	0x0089
                    008A    148 _TL0	=	0x008a
                    008B    149 _TL1	=	0x008b
                    008C    150 _TH0	=	0x008c
                    008D    151 _TH1	=	0x008d
                    0090    152 _P1	=	0x0090
                    0098    153 _SCON	=	0x0098
                    0099    154 _SBUF	=	0x0099
                    00A0    155 _P2	=	0x00a0
                    00A8    156 _IE	=	0x00a8
                    00B0    157 _P3	=	0x00b0
                    00B8    158 _IP	=	0x00b8
                    00D0    159 _PSW	=	0x00d0
                    00E0    160 _ACC	=	0x00e0
                    00F0    161 _B	=	0x00f0
                    00C8    162 _T2CON	=	0x00c8
                    00CA    163 _RCAP2L	=	0x00ca
                    00CB    164 _RCAP2H	=	0x00cb
                    00CC    165 _TL2	=	0x00cc
                    00CD    166 _TH2	=	0x00cd
                            167 ;--------------------------------------------------------
                            168 ; special function bits
                            169 ;--------------------------------------------------------
                            170 	.area RSEG    (DATA)
                    0080    171 _P0_0	=	0x0080
                    0081    172 _P0_1	=	0x0081
                    0082    173 _P0_2	=	0x0082
                    0083    174 _P0_3	=	0x0083
                    0084    175 _P0_4	=	0x0084
                    0085    176 _P0_5	=	0x0085
                    0086    177 _P0_6	=	0x0086
                    0087    178 _P0_7	=	0x0087
                    0088    179 _IT0	=	0x0088
                    0089    180 _IE0	=	0x0089
                    008A    181 _IT1	=	0x008a
                    008B    182 _IE1	=	0x008b
                    008C    183 _TR0	=	0x008c
                    008D    184 _TF0	=	0x008d
                    008E    185 _TR1	=	0x008e
                    008F    186 _TF1	=	0x008f
                    0090    187 _P1_0	=	0x0090
                    0091    188 _P1_1	=	0x0091
                    0092    189 _P1_2	=	0x0092
                    0093    190 _P1_3	=	0x0093
                    0094    191 _P1_4	=	0x0094
                    0095    192 _P1_5	=	0x0095
                    0096    193 _P1_6	=	0x0096
                    0097    194 _P1_7	=	0x0097
                    0098    195 _RI	=	0x0098
                    0099    196 _TI	=	0x0099
                    009A    197 _RB8	=	0x009a
                    009B    198 _TB8	=	0x009b
                    009C    199 _REN	=	0x009c
                    009D    200 _SM2	=	0x009d
                    009E    201 _SM1	=	0x009e
                    009F    202 _SM0	=	0x009f
                    00A0    203 _P2_0	=	0x00a0
                    00A1    204 _P2_1	=	0x00a1
                    00A2    205 _P2_2	=	0x00a2
                    00A3    206 _P2_3	=	0x00a3
                    00A4    207 _P2_4	=	0x00a4
                    00A5    208 _P2_5	=	0x00a5
                    00A6    209 _P2_6	=	0x00a6
                    00A7    210 _P2_7	=	0x00a7
                    00A8    211 _EX0	=	0x00a8
                    00A9    212 _ET0	=	0x00a9
                    00AA    213 _EX1	=	0x00aa
                    00AB    214 _ET1	=	0x00ab
                    00AC    215 _ES	=	0x00ac
                    00AF    216 _EA	=	0x00af
                    00B0    217 _P3_0	=	0x00b0
                    00B1    218 _P3_1	=	0x00b1
                    00B2    219 _P3_2	=	0x00b2
                    00B3    220 _P3_3	=	0x00b3
                    00B4    221 _P3_4	=	0x00b4
                    00B5    222 _P3_5	=	0x00b5
                    00B6    223 _P3_6	=	0x00b6
                    00B7    224 _P3_7	=	0x00b7
                    00B0    225 _RXD	=	0x00b0
                    00B1    226 _TXD	=	0x00b1
                    00B2    227 _INT0	=	0x00b2
                    00B3    228 _INT1	=	0x00b3
                    00B4    229 _T0	=	0x00b4
                    00B5    230 _T1	=	0x00b5
                    00B6    231 _WR	=	0x00b6
                    00B7    232 _RD	=	0x00b7
                    00B8    233 _PX0	=	0x00b8
                    00B9    234 _PT0	=	0x00b9
                    00BA    235 _PX1	=	0x00ba
                    00BB    236 _PT1	=	0x00bb
                    00BC    237 _PS	=	0x00bc
                    00D0    238 _P	=	0x00d0
                    00D1    239 _F1	=	0x00d1
                    00D2    240 _OV	=	0x00d2
                    00D3    241 _RS0	=	0x00d3
                    00D4    242 _RS1	=	0x00d4
                    00D5    243 _F0	=	0x00d5
                    00D6    244 _AC	=	0x00d6
                    00D7    245 _CY	=	0x00d7
                    00AD    246 _ET2	=	0x00ad
                    00BD    247 _PT2	=	0x00bd
                    00C8    248 _T2CON_0	=	0x00c8
                    00C9    249 _T2CON_1	=	0x00c9
                    00CA    250 _T2CON_2	=	0x00ca
                    00CB    251 _T2CON_3	=	0x00cb
                    00CC    252 _T2CON_4	=	0x00cc
                    00CD    253 _T2CON_5	=	0x00cd
                    00CE    254 _T2CON_6	=	0x00ce
                    00CF    255 _T2CON_7	=	0x00cf
                    00C8    256 _CP_RL2	=	0x00c8
                    00C9    257 _C_T2	=	0x00c9
                    00CA    258 _TR2	=	0x00ca
                    00CB    259 _EXEN2	=	0x00cb
                    00CC    260 _TCLK	=	0x00cc
                    00CD    261 _RCLK	=	0x00cd
                    00CE    262 _EXF2	=	0x00ce
                    00CF    263 _TF2	=	0x00cf
                            264 ;--------------------------------------------------------
                            265 ; overlayable register banks
                            266 ;--------------------------------------------------------
                            267 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     268 	.ds 8
                            269 ;--------------------------------------------------------
                            270 ; internal ram data
                            271 ;--------------------------------------------------------
                            272 	.area DSEG    (DATA)
   0008                     273 _display_PARM_2:
   0008                     274 	.ds 1
                            275 ;--------------------------------------------------------
                            276 ; overlayable items in internal ram 
                            277 ;--------------------------------------------------------
                            278 	.area	OSEG    (OVR,DATA)
                            279 ;--------------------------------------------------------
                            280 ; Stack segment in internal ram 
                            281 ;--------------------------------------------------------
                            282 	.area	SSEG	(DATA)
   0009                     283 __start__stack:
   0009                     284 	.ds	1
                            285 
                            286 ;--------------------------------------------------------
                            287 ; indirectly addressable internal ram data
                            288 ;--------------------------------------------------------
                            289 	.area ISEG    (DATA)
                            290 ;--------------------------------------------------------
                            291 ; bit data
                            292 ;--------------------------------------------------------
                            293 	.area BSEG    (BIT)
                            294 ;--------------------------------------------------------
                            295 ; paged external ram data
                            296 ;--------------------------------------------------------
                            297 	.area PSEG    (PAG,XDATA)
                            298 ;--------------------------------------------------------
                            299 ; external ram data
                            300 ;--------------------------------------------------------
                            301 	.area XSEG    (XDATA)
                            302 ;--------------------------------------------------------
                            303 ; external initialized ram data
                            304 ;--------------------------------------------------------
                            305 	.area XISEG   (XDATA)
                            306 	.area HOME    (CODE)
                            307 	.area GSINIT0 (CODE)
                            308 	.area GSINIT1 (CODE)
                            309 	.area GSINIT2 (CODE)
                            310 	.area GSINIT3 (CODE)
                            311 	.area GSINIT4 (CODE)
                            312 	.area GSINIT5 (CODE)
                            313 	.area GSINIT  (CODE)
                            314 	.area GSFINAL (CODE)
                            315 	.area CSEG    (CODE)
                            316 ;--------------------------------------------------------
                            317 ; interrupt vector 
                            318 ;--------------------------------------------------------
                            319 	.area HOME    (CODE)
   0000                     320 __interrupt_vect:
   0000 02 00 03            321 	ljmp	__sdcc_gsinit_startup
                            322 ;--------------------------------------------------------
                            323 ; global & static initialisations
                            324 ;--------------------------------------------------------
                            325 	.area HOME    (CODE)
                            326 	.area GSINIT  (CODE)
                            327 	.area GSFINAL (CODE)
                            328 	.area GSINIT  (CODE)
                            329 	.globl __sdcc_gsinit_startup
                            330 	.globl __sdcc_program_startup
                            331 	.globl __start__stack
                            332 	.globl __mcs51_genXINIT
                            333 	.globl __mcs51_genXRAMCLEAR
                            334 	.globl __mcs51_genRAMCLEAR
                            335 	.area GSFINAL (CODE)
   005C 02 00 5F            336 	ljmp	__sdcc_program_startup
                            337 ;--------------------------------------------------------
                            338 ; Home
                            339 ;--------------------------------------------------------
                            340 	.area HOME    (CODE)
                            341 	.area CSEG    (CODE)
   005F                     342 __sdcc_program_startup:
   005F 12 00 64            343 	lcall	_main
                            344 ;	return from main will lock up
   0062 80 FE               345 	sjmp .
                            346 ;--------------------------------------------------------
                            347 ; code
                            348 ;--------------------------------------------------------
                            349 	.area CSEG    (CODE)
                            350 ;------------------------------------------------------------
                            351 ;Allocation info for local variables in function 'main'
                            352 ;------------------------------------------------------------
                            353 ;shi                       Allocated to registers r2 
                            354 ;ge                        Allocated to registers r3 
                            355 ;tmp                       Allocated to registers r4 
                            356 ;------------------------------------------------------------
                            357 ;60.c:11: void main()
                            358 ;	-----------------------------------------
                            359 ;	 function main
                            360 ;	-----------------------------------------
   0064                     361 _main:
                    0002    362 	ar2 = 0x02
                    0003    363 	ar3 = 0x03
                    0004    364 	ar4 = 0x04
                    0005    365 	ar5 = 0x05
                    0006    366 	ar6 = 0x06
                    0007    367 	ar7 = 0x07
                    0000    368 	ar0 = 0x00
                    0001    369 	ar1 = 0x01
                            370 ;60.c:14: unsigned char shi = 0, ge = 0;
                            371 ;     genAssign
   0064 7A 00               372 	mov	r2,#0x00
                            373 ;     genAssign
   0066 7B 00               374 	mov	r3,#0x00
                            375 ;60.c:17: while(1){
   0068                     376 00106$:
                            377 ;60.c:18: if (ge  == 10){
                            378 ;     genCmpEq
                            379 ;	Peephole 112.b	changed ljmp to sjmp
                            380 ;	Peephole 198.b	optimized misc jump sequence
   0068 BB 0A 03            381 	cjne	r3,#0x0A,00102$
                            382 ;	Peephole 200.b	removed redundant sjmp
                            383 ;	Peephole 300	removed redundant label 00120$
                            384 ;	Peephole 300	removed redundant label 00121$
                            385 ;60.c:19: ge  = 0;
                            386 ;     genAssign
   006B 7B 00               387 	mov	r3,#0x00
                            388 ;60.c:20: shi ++;
                            389 ;     genPlus
                            390 ;     genPlusIncr
   006D 0A                  391 	inc	r2
   006E                     392 00102$:
                            393 ;60.c:22: if (shi == 6)
                            394 ;     genCmpEq
                            395 ;	Peephole 112.b	changed ljmp to sjmp
                            396 ;	Peephole 198.b	optimized misc jump sequence
   006E BA 06 02            397 	cjne	r2,#0x06,00117$
                            398 ;	Peephole 200.b	removed redundant sjmp
                            399 ;	Peephole 300	removed redundant label 00122$
                            400 ;	Peephole 300	removed redundant label 00123$
                            401 ;60.c:23: shi = 0;
                            402 ;     genAssign
   0071 7A 00               403 	mov	r2,#0x00
                            404 ;60.c:25: for (tmp = 80; tmp > 0; tmp--)
   0073                     405 00117$:
                            406 ;     genAssign
   0073 7C 50               407 	mov	r4,#0x50
   0075                     408 00108$:
                            409 ;     genCmpGt
                            410 ;     genCmp
                            411 ;     genIfxJump
                            412 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            413 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0075 EC                  414 	mov	a,r4
   0076 24 FF               415 	add	a,#0xff - 0x00
   0078 50 16               416 	jnc	00111$
                            417 ;	Peephole 300	removed redundant label 00124$
                            418 ;60.c:26: display(shi, ge);
                            419 ;     genAssign
   007A 8B 08               420 	mov	_display_PARM_2,r3
                            421 ;     genCall
   007C 8A 82               422 	mov	dpl,r2
   007E C0 02               423 	push	ar2
   0080 C0 03               424 	push	ar3
   0082 C0 04               425 	push	ar4
   0084 12 00 B6            426 	lcall	_display
   0087 D0 04               427 	pop	ar4
   0089 D0 03               428 	pop	ar3
   008B D0 02               429 	pop	ar2
                            430 ;60.c:25: for (tmp = 80; tmp > 0; tmp--)
                            431 ;     genMinus
                            432 ;     genMinusDec
   008D 1C                  433 	dec	r4
                            434 ;	Peephole 112.b	changed ljmp to sjmp
   008E 80 E5               435 	sjmp	00108$
   0090                     436 00111$:
                            437 ;60.c:28: ge++;
                            438 ;     genPlus
                            439 ;     genPlusIncr
   0090 0B                  440 	inc	r3
                            441 ;	Peephole 112.b	changed ljmp to sjmp
   0091 80 D5               442 	sjmp	00106$
                            443 ;	Peephole 259.a	removed redundant label 00112$ and ret
                            444 ;
                            445 ;------------------------------------------------------------
                            446 ;Allocation info for local variables in function 'delayms'
                            447 ;------------------------------------------------------------
                            448 ;i                         Allocated to registers r2 r3 
                            449 ;j                         Allocated to registers r4 
                            450 ;------------------------------------------------------------
                            451 ;60.c:33: void delayms(unsigned int i)
                            452 ;	-----------------------------------------
                            453 ;	 function delayms
                            454 ;	-----------------------------------------
   0093                     455 _delayms:
                            456 ;     genReceive
   0093 AA 82               457 	mov	r2,dpl
   0095 AB 83               458 	mov	r3,dph
                            459 ;     genAssign
   0097                     460 00105$:
                            461 ;60.c:36: for (; i > 0; i--)
                            462 ;     genIfx
   0097 EA                  463 	mov	a,r2
   0098 4B                  464 	orl	a,r3
                            465 ;     genIfxJump
                            466 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0099 60 04               467 	jz	00111$
                            468 ;	Peephole 300	removed redundant label 00120$
                            469 ;     genAssign
   009B 7C 01               470 	mov	r4,#0x01
                            471 ;	Peephole 112.b	changed ljmp to sjmp
   009D 80 02               472 	sjmp	00112$
   009F                     473 00111$:
                            474 ;     genAssign
   009F 7C 00               475 	mov	r4,#0x00
   00A1                     476 00112$:
                            477 ;     genIfx
   00A1 EC                  478 	mov	a,r4
                            479 ;     genIfxJump
                            480 ;	Peephole 108.c	removed ljmp by inverse jump logic
   00A2 60 11               481 	jz	00109$
                            482 ;	Peephole 300	removed redundant label 00121$
                            483 ;60.c:37: for (j = 110; j > 0; j--);
                            484 ;     genAssign
   00A4 7C 6E               485 	mov	r4,#0x6E
   00A6                     486 00101$:
                            487 ;     genCmpGt
                            488 ;     genCmp
                            489 ;     genIfxJump
                            490 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            491 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   00A6 EC                  492 	mov	a,r4
   00A7 24 FF               493 	add	a,#0xff - 0x00
   00A9 50 03               494 	jnc	00107$
                            495 ;	Peephole 300	removed redundant label 00122$
                            496 ;     genMinus
                            497 ;     genMinusDec
   00AB 1C                  498 	dec	r4
                            499 ;	Peephole 112.b	changed ljmp to sjmp
   00AC 80 F8               500 	sjmp	00101$
   00AE                     501 00107$:
                            502 ;60.c:36: for (; i > 0; i--)
                            503 ;     genMinus
                            504 ;     genMinusDec
   00AE 1A                  505 	dec	r2
   00AF BA FF 01            506 	cjne	r2,#0xff,00123$
   00B2 1B                  507 	dec	r3
   00B3                     508 00123$:
                            509 ;	Peephole 112.b	changed ljmp to sjmp
   00B3 80 E2               510 	sjmp	00105$
   00B5                     511 00109$:
   00B5 22                  512 	ret
                            513 ;------------------------------------------------------------
                            514 ;Allocation info for local variables in function 'display'
                            515 ;------------------------------------------------------------
                            516 ;ge                        Allocated with name '_display_PARM_2'
                            517 ;shi                       Allocated to registers r2 
                            518 ;------------------------------------------------------------
                            519 ;60.c:39: void display(unsigned char shi, unsigned char ge)
                            520 ;	-----------------------------------------
                            521 ;	 function display
                            522 ;	-----------------------------------------
   00B6                     523 _display:
                            524 ;     genReceive
   00B6 AA 82               525 	mov	r2,dpl
                            526 ;60.c:41: P1 = DIG_PLACE[0];
                            527 ;     genPointerGet
                            528 ;     genCodePointerGet
   00B8 90 00 FE            529 	mov	dptr,#_DIG_PLACE
                            530 ;	Peephole 181	changed mov to clr
   00BB E4                  531 	clr	a
   00BC 93                  532 	movc	a,@a+dptr
   00BD F5 90               533 	mov	_P1,a
                            534 ;60.c:42: P0 = DIG_CODE[ge];
                            535 ;     genPlus
   00BF E5 08               536 	mov	a,_display_PARM_2
   00C1 24 06               537 	add	a,#_DIG_CODE
   00C3 F5 82               538 	mov	dpl,a
                            539 ;	Peephole 181	changed mov to clr
   00C5 E4                  540 	clr	a
   00C6 34 01               541 	addc	a,#(_DIG_CODE >> 8)
   00C8 F5 83               542 	mov	dph,a
                            543 ;     genPointerGet
                            544 ;     genCodePointerGet
                            545 ;	Peephole 181	changed mov to clr
   00CA E4                  546 	clr	a
   00CB 93                  547 	movc	a,@a+dptr
   00CC F5 80               548 	mov	_P0,a
                            549 ;60.c:43: delayms(2);
                            550 ;     genCall
                            551 ;	Peephole 182.b	used 16 bit load of dptr
   00CE 90 00 02            552 	mov	dptr,#0x0002
   00D1 C0 02               553 	push	ar2
   00D3 12 00 93            554 	lcall	_delayms
   00D6 D0 02               555 	pop	ar2
                            556 ;60.c:44: P0 = 0x0;
                            557 ;     genAssign
   00D8 75 80 00            558 	mov	_P0,#0x00
                            559 ;60.c:46: P1 = DIG_PLACE[1];
                            560 ;     genPointerGet
                            561 ;     genCodePointerGet
   00DB 90 00 FF            562 	mov	dptr,#(_DIG_PLACE + 0x0001)
                            563 ;	Peephole 181	changed mov to clr
   00DE E4                  564 	clr	a
   00DF 93                  565 	movc	a,@a+dptr
   00E0 F5 90               566 	mov	_P1,a
                            567 ;60.c:47: P0 = DIG_CODE[shi];
                            568 ;     genPlus
                            569 ;	Peephole 236.g	used r2 instead of ar2
   00E2 EA                  570 	mov	a,r2
   00E3 24 06               571 	add	a,#_DIG_CODE
   00E5 F5 82               572 	mov	dpl,a
                            573 ;	Peephole 181	changed mov to clr
   00E7 E4                  574 	clr	a
   00E8 34 01               575 	addc	a,#(_DIG_CODE >> 8)
   00EA F5 83               576 	mov	dph,a
                            577 ;     genPointerGet
                            578 ;     genCodePointerGet
                            579 ;	Peephole 181	changed mov to clr
   00EC E4                  580 	clr	a
   00ED 93                  581 	movc	a,@a+dptr
   00EE F5 80               582 	mov	_P0,a
                            583 ;60.c:48: delayms(2);
                            584 ;     genCall
                            585 ;	Peephole 182.b	used 16 bit load of dptr
   00F0 90 00 02            586 	mov	dptr,#0x0002
   00F3 12 00 93            587 	lcall	_delayms
                            588 ;60.c:49: P0 = 0x0;
                            589 ;     genAssign
   00F6 75 80 00            590 	mov	_P0,#0x00
                            591 ;	Peephole 300	removed redundant label 00101$
   00F9 22                  592 	ret
                            593 	.area CSEG    (CODE)
                            594 	.area CONST   (CODE)
   00FE                     595 _DIG_PLACE:
   00FE FE                  596 	.db #0xFE
   00FF FD                  597 	.db #0xFD
   0100 FB                  598 	.db #0xFB
   0101 F7                  599 	.db #0xF7
   0102 EF                  600 	.db #0xEF
   0103 DF                  601 	.db #0xDF
   0104 BF                  602 	.db #0xBF
   0105 7F                  603 	.db #0x7F
   0106                     604 _DIG_CODE:
   0106 3F                  605 	.db #0x3F
   0107 06                  606 	.db #0x06
   0108 5B                  607 	.db #0x5B
   0109 4F                  608 	.db #0x4F
   010A 66                  609 	.db #0x66
   010B 6D                  610 	.db #0x6D
   010C 7D                  611 	.db #0x7D
   010D 07                  612 	.db #0x07
   010E 7F                  613 	.db #0x7F
   010F 6F                  614 	.db #0x6F
   0110 77                  615 	.db #0x77
   0111 7C                  616 	.db #0x7C
   0112 39                  617 	.db #0x39
   0113 5E                  618 	.db #0x5E
   0114 79                  619 	.db #0x79
   0115 71                  620 	.db #0x71
   0116 00                  621 	.db 0x00
                            622 	.area XINIT   (CODE)
